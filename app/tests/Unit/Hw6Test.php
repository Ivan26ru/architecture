<?php

declare(strict_types=1);

namespace Tests\Unit;

use App\Hw2\Commands\Vector;
use App\Hw5\IoC\IoC;
use App\Hw6\AutoGenerateClass;
use App\Hw6\CarOperationMovingInterface;
use App\Hw6\CarOperationMovingWithChangeInterface;
use PHPUnit\Framework\TestCase;

class Hw6Test extends TestCase
{
    /**
     * Тест - проверка автоматической генерации PHP класса по заданному контракту.
     *
     * @return void
     */
    public function testGenerateClassForInterface(): void
    {
        $classGenerator = new AutogenerateClass(CarOperationMovingInterface::class);
        $phpCode        = $classGenerator->generateClassStr();
        eval($phpCode);

        $vector = new Vector(1, 1);
        $ioc    = new IoC();

        $adapterClass = 'AutoGeneratedCarOperationMovingInterface';

        $adapter = new $adapterClass($vector, $ioc);

        $this->assertEquals($adapterClass, $adapter::class);
    }

    /**
     * Тест - Экземпляры генерируемых оберток для объекта obj можно создавать следующей строкой
     * $ioC->resolve('Adapter', CarOperationMovingInterface::class);
     *
     * @return void
     * @throws \Exception
     */
    public function testCreateAdapter(): void
    {
        // Зарегистрируем класс авто-генератора классов PHP в IoC контейнере
        $prefixClass = 'AutoGeneratedTest';
        $ioC         = new IoC();
        $ioC->resolve(IoC::IOC_REGISTER, 'Adapter', function ($class) use ($prefixClass) {
            return (new AutoGenerateClass($class, $prefixClass))->generateClassStr();
        });

        // Вернем автоматически-сгенерируемый адаптер по заданному контракту
        $adapterPhpCode = $ioC->resolve('Adapter', CarOperationMovingInterface::class);
        eval($adapterPhpCode);

        $vector       = new Vector(1, 2);
        $adapterClass = $prefixClass.'CarOperationMovingInterface';
        $adapter      = new $adapterClass($vector, $ioC);

        $this->assertEquals($adapterClass, $adapter::class);
    }

    /**
     * Тест - если интерфейсе потребуются какие-либо методы, например, как finish();
     * AutoGenerateClass подстраивается под все изменения.
     *
     * @return void
     */
    public function testThree(): void
    {
        $classGenerator = new AutoGenerateClass(CarOperationMovingWithChangeInterface::class);
        $phpCode        = $classGenerator->generateClassStr();
        eval($phpCode);

        $vector       = new Vector(1, 2);
        $ioC          = new IoC();
        $adapterClass = 'AutoGeneratedCarOperationMovingWithChangeInterface';
        $adapter      = new $adapterClass($vector, $ioC);

        $this->assertEquals($adapterClass, $adapter::class);
    }
}